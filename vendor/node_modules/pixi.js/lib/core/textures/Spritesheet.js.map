{"version":3,"sources":["../../../src/core/textures/Spritesheet.js"],"names":["Spritesheet","baseTexture","data","resolutionFilename","textures","resolution","_updateResolution","imageUrl","_frames","frames","_frameKeys","Object","keys","_batchIndex","_callback","scale","meta","undefined","parseFloat","update","parse","callback","length","BATCH_SIZE","_processFrames","_parseComplete","_nextBatch","initialFrameIndex","frameIndex","maxFrames","i","rect","frame","trim","orig","sourceSize","w","h","rotated","x","y","trimmed","spriteSourceSize","addToCache","call","setTimeout","destroy","destroyBase"],"mappings":"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","file":"Spritesheet.js","sourcesContent":["import { Rectangle, Texture } from '../';\nimport { getResolutionOfUrl } from '../utils';\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Spritesheet\n{\n    /**\n     * The maximum number of Textures to build per process.\n     *\n     * @type {number}\n     * @default 1000\n     */\n    static get BATCH_SIZE()\n    {\n        return 1000;\n    }\n\n    /**\n     * @param {PIXI.BaseTexture} baseTexture Reference to the source BaseTexture object.\n     * @param {Object} data - Spritesheet image data.\n     * @param {string} [resolutionFilename] - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(baseTexture, data, resolutionFilename = null)\n    {\n        /**\n         * Reference to ths source texture\n         * @type {PIXI.BaseTexture}\n         */\n        this.baseTexture = baseTexture;\n\n        /**\n         * Map of spritesheet textures.\n         * @type {Object}\n         */\n        this.textures = {};\n\n        /**\n         * Reference to the original JSON data.\n         * @type {Object}\n         */\n        this.data = data;\n\n        /**\n         * The resolution of the spritesheet.\n         * @type {number}\n         */\n        this.resolution = this._updateResolution(\n            resolutionFilename || this.baseTexture.imageUrl\n        );\n\n        /**\n         * Map of spritesheet frames.\n         * @type {Object}\n         * @private\n         */\n        this._frames = this.data.frames;\n\n        /**\n         * Collection of frame names.\n         * @type {string[]}\n         * @private\n         */\n        this._frameKeys = Object.keys(this._frames);\n\n        /**\n         * Current batch index being processed.\n         * @type {number}\n         * @private\n         */\n        this._batchIndex = 0;\n\n        /**\n         * Callback when parse is completed.\n         * @type {Function}\n         * @private\n         */\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     *\n     * @private\n     * @param {string} resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @return {number} Resolution to use for spritesheet.\n     */\n    _updateResolution(resolutionFilename)\n    {\n        const scale = this.data.meta.scale;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.resolution = resolution;\n            this.baseTexture.update();\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     *\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    parse(callback)\n    {\n        this._batchIndex = 0;\n        this._callback = callback;\n\n        if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n        {\n            this._processFrames(0);\n            this._parseComplete();\n        }\n        else\n        {\n            this._nextBatch();\n        }\n    }\n\n    /**\n     * Process a batch of frames\n     *\n     * @private\n     * @param {number} initialFrameIndex - The index of frame to start.\n     */\n    _processFrames(initialFrameIndex)\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const rect = this._frames[i].frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    this._frames[i].sourceSize.w / this.resolution,\n                    this._frames[i].sourceSize.h / this.resolution\n                );\n\n                if (this._frames[i].rotated)\n                {\n                    frame = new Rectangle(\n                        rect.x / this.resolution,\n                        rect.y / this.resolution,\n                        rect.h / this.resolution,\n                        rect.w / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        rect.x / this.resolution,\n                        rect.y / this.resolution,\n                        rect.w / this.resolution,\n                        rect.h / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (this._frames[i].trimmed)\n                {\n                    trim = new Rectangle(\n                        this._frames[i].spriteSourceSize.x / this.resolution,\n                        this._frames[i].spriteSourceSize.y / this.resolution,\n                        rect.w / this.resolution,\n                        rect.h / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    this._frames[i].rotated ? 2 : 0\n                );\n\n                // lets also add the frame to pixi's global cache for fromFrame and fromImage functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /**\n     * The parse has completed.\n     *\n     * @private\n     */\n    _parseComplete()\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /**\n     * Begin the next batch of textures.\n     *\n     * @private\n     */\n    _nextBatch()\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well\n     */\n    destroy(destroyBase = false)\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this.baseTexture.destroy();\n        }\n        this.baseTexture = null;\n    }\n}\n"]}