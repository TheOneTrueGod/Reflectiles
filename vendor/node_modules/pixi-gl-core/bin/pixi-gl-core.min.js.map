{"version":3,"sources":["node_modules/pixify/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/GLBuffer.js","src/GLFramebuffer.js","src/GLShader.js","src/GLTexture.js","src/VertexArrayObject.js","src/createContext.js","src/setVertexAttribArrays.js","src/shader/compileProgram.js","src/shader/defaultValue.js","src/shader/extractAttributes.js","src/shader/extractUniforms.js","src/shader/generateUniformAccessObject.js","src/shader/index.js","src/shader/mapSize.js","src/shader/mapType.js","src/shader/setPrecision.js","src"],"names":["f","exports","module","define","amd","g","window","global","self","this","pixiGlCore","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","EMPTY_ARRAY_BUFFER","ArrayBuffer","Buffer","gl","type","data","drawType","buffer","createBuffer","ARRAY_BUFFER","STATIC_DRAW","upload","_updateID","prototype","offset","dontBind","bind","byteLength","bufferSubData","bufferData","bindBuffer","createVertexBuffer","createIndexBuffer","ELEMENT_ARRAY_BUFFER","create","destroy","deleteBuffer","Texture","Framebuffer","width","height","framebuffer","createFramebuffer","stencil","texture","enableTexture","framebufferTexture2D","FRAMEBUFFER","COLOR_ATTACHMENT0","TEXTURE_2D","enableStencil","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","renderbufferStorage","DEPTH_STENCIL","clear","b","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","bindFramebuffer","unbind","resize","uploadData","deleteFramebuffer","createRGBA","fromData","enableNearestScaling","enableWrapClamp","fbo","createFloat32","compileProgram","extractAttributes","extractUniforms","setPrecision","generateUniformAccessObject","Shader","vertexSrc","fragmentSrc","precision","attributeLocations","program","attributes","uniformData","uniforms","useProgram","deleteProgram","format","createTexture","mipmap","premultiplyAlpha","RGBA","UNSIGNED_BYTE","source","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","newWidth","videoWidth","newHeight","videoHeight","texImage2D","texSubImage2D","FLOATING_POINT_AVAILABLE","Float32Array","ext","getExtension","FLOAT","location","undefined","activeTexture","TEXTURE0","bindTexture","minFilter","linear","texParameteri","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","LINEAR","NEAREST","magFilter","TEXTURE_MAG_FILTER","enableMipmap","generateMipmap","enableLinearScaling","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","enableWrapRepeat","REPEAT","enableWrapMirrorRepeat","MIRRORED_REPEAT","deleteTexture","fromSource","VertexArrayObject","state","nativeVaoExtension","FORCE_NATIVE","nativeState","nativeVao","createVertexArrayOES","maxAttribs","getParameter","MAX_VERTEX_ATTRIBS","tempAttribState","Array","attribState","indexBuffer","dirty","setVertexAttribArrays","constructor","bindVertexArrayOES","activate","lastBuffer","attrib","vertexAttribPointer","attribute","size","normalized","stride","start","addAttribute","push","addIndex","draw","drawElements","UNSIGNED_SHORT","drawArrays","getSize","deleteVertexArrayOES","createContext","canvas","options","getContext","attribs","enableVertexAttribArray","disableVertexAttribArray","glVertShader","compileShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","createProgram","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","console","error","VALIDATE_STATUS","getError","getProgramInfoLog","warn","deleteShader","src","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","log","getShaderInfoLog","defaultValue","Int32Array","booleanArray","array","mapType","mapSize","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","name","getAttribLocation","pointer","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","replace","getUniformLocation","value","uniformKeys","Object","keys","fullName","nameTokens","split","uniformGroup","getUniformGroup","uniform","defineProperty","get","generateGetter","set","generateSetter","template","getterTemplate","Function","setTemplate","setterTemplate","GLSL_TO_SINGLE_SETTERS","GLSL_TO_ARRAY_SETTERS","cur","join","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","bool","bvec2","bvec3","bvec4","mat2","mat3","mat4","sampler2D","GLSL_TO_SIZE","GL_TABLE","typeNames","GL_TO_GLSL_TYPES","tn","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","substring","GLBuffer","GLFramebuffer","GLShader","GLTexture","PIXI","glCore"],"mappings":"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","file":"pixi-gl-core.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var EMPTY_ARRAY_BUFFER = new ArrayBuffer(0);\n\n/**\n * Helper class to create a webGL buffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param type {gl.ARRAY_BUFFER | gl.ELEMENT_ARRAY_BUFFER} @mat\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n * @param drawType {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n */\nvar Buffer = function(gl, type, data, drawType)\n{\n\n\t/**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n\tthis.gl = gl;\n\n\t/**\n     * The WebGL buffer, created upon instantiation\n     *\n     * @member {WebGLBuffer}\n     */\n\tthis.buffer = gl.createBuffer();\n\n\t/**\n     * The type of the buffer\n     *\n     * @member {gl.ARRAY_BUFFER|gl.ELEMENT_ARRAY_BUFFER}\n     */\n\tthis.type = type || gl.ARRAY_BUFFER;\n\n\t/**\n     * The draw type of the buffer\n     *\n     * @member {gl.STATIC_DRAW|gl.DYNAMIC_DRAW|gl.STREAM_DRAW}\n     */\n\tthis.drawType = drawType || gl.STATIC_DRAW;\n\n\t/**\n     * The data in the buffer, as a typed array\n     *\n     * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}\n     */\n\tthis.data = EMPTY_ARRAY_BUFFER;\n\n\tif(data)\n\t{\n\t\tthis.upload(data);\n\t}\n\n\tthis._updateID = 0;\n};\n\n/**\n * Uploads the buffer to the GPU\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data to upload\n * @param offset {Number} if only a subset of the data should be uploaded, this is the amount of data to subtract\n * @param dontBind {Boolean} whether to bind the buffer before uploading it\n */\nBuffer.prototype.upload = function(data, offset, dontBind)\n{\n\t// todo - needed?\n\tif(!dontBind) this.bind();\n\n\tvar gl = this.gl;\n\n\tdata = data || this.data;\n\toffset = offset || 0;\n\n\tif(this.data.byteLength >= data.byteLength)\n\t{\n\t\tgl.bufferSubData(this.type, offset, data);\n\t}\n\telse\n\t{\n\t\tgl.bufferData(this.type, data, this.drawType);\n\t}\n\n\tthis.data = data;\n};\n/**\n * Binds the buffer\n *\n */\nBuffer.prototype.bind = function()\n{\n\tvar gl = this.gl;\n\tgl.bindBuffer(this.type, this.buffer);\n};\n\nBuffer.createVertexBuffer = function(gl, data, drawType)\n{\n\treturn new Buffer(gl, gl.ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.createIndexBuffer = function(gl, data, drawType)\n{\n\treturn new Buffer(gl, gl.ELEMENT_ARRAY_BUFFER, data, drawType);\n};\n\nBuffer.create = function(gl, type, data, drawType)\n{\n\treturn new Buffer(gl, type, data, drawType);\n};\n\n/**\n * Destroys the buffer\n *\n */\nBuffer.prototype.destroy = function(){\n\tthis.gl.deleteBuffer(this.buffer);\n};\n\nmodule.exports = Buffer;\n","\nvar Texture = require('./GLTexture');\n\n/**\n * Helper class to create a webGL Framebuffer\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n */\nvar Framebuffer = function(gl, width, height)\n{\n    /**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     * The frame buffer\n     *\n     * @member {WebGLFramebuffer}\n     */\n    this.framebuffer = gl.createFramebuffer();\n\n    /**\n     * The stencil buffer\n     *\n     * @member {WebGLRenderbuffer}\n     */\n    this.stencil = null;\n\n    /**\n     * The stencil buffer\n     *\n     * @member {PIXI.glCore.GLTexture}\n     */\n    this.texture = null;\n\n    /**\n     * The width of the drawing area of the buffer\n     *\n     * @member {Number}\n     */\n    this.width = width || 100;\n    /**\n     * The height of the drawing area of the buffer\n     *\n     * @member {Number}\n     */\n    this.height = height || 100;\n};\n\n/**\n * Adds a texture to the frame buffer\n * @param texture {PIXI.glCore.GLTexture}\n */\nFramebuffer.prototype.enableTexture = function(texture)\n{\n    var gl = this.gl;\n\n    this.texture = texture || new Texture(gl);\n\n    this.texture.bind();\n\n    //gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA,  this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n    this.bind();\n\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);\n};\n\n/**\n * Initialises the stencil buffer\n */\nFramebuffer.prototype.enableStencil = function()\n{\n    if(this.stencil)return;\n\n    var gl = this.gl;\n\n    this.stencil = gl.createRenderbuffer();\n\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n\n    // TODO.. this is depth AND stencil?\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.stencil);\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL,  this.width  , this.height );\n\n\n};\n\n/**\n * Erases the drawing area and fills it with a colour\n * @param  r {Number} the red value of the clearing colour\n * @param  g {Number} the green value of the clearing colour\n * @param  b {Number} the blue value of the clearing colour\n * @param  a {Number} the alpha value of the clearing colour\n */\nFramebuffer.prototype.clear = function( r, g, b, a )\n{\n    this.bind();\n\n    var gl = this.gl;\n\n    gl.clearColor(r, g, b, a);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n};\n\n/**\n * Binds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.bind = function()\n{\n    var gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer );\n};\n\n/**\n * Unbinds the frame buffer to the WebGL context\n */\nFramebuffer.prototype.unbind = function()\n{\n    var gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null );\n};\n/**\n * Resizes the drawing area of the buffer to the given width and height\n * @param  width  {Number} the new width\n * @param  height {Number} the new height\n */\nFramebuffer.prototype.resize = function(width, height)\n{\n    var gl = this.gl;\n\n    this.width = width;\n    this.height = height;\n\n    if ( this.texture )\n    {\n        this.texture.uploadData(null, width, height);\n    }\n\n    if ( this.stencil )\n    {\n        // update the stencil buffer width and height\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this.stencil);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);\n    }\n};\n\n/**\n * Destroys this buffer\n */\nFramebuffer.prototype.destroy = function()\n{\n    var gl = this.gl;\n\n    //TODO\n    if(this.texture)\n    {\n        this.texture.destroy();\n    }\n\n    gl.deleteFramebuffer(this.framebuffer);\n\n    this.gl = null;\n\n    this.stencil = null;\n    this.texture = null;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createRGBA = function(gl, width, height, data)\n{\n    var texture = Texture.fromData(gl, null, width, height);\n    texture.enableNearestScaling();\n    texture.enableWrapClamp();\n\n    //now create the framebuffer object and attach the texture to it.\n    var fbo = new Framebuffer(gl, width, height);\n    fbo.enableTexture(texture);\n\n    //fbo.enableStencil(); // get this back on soon!\n\n    fbo.unbind();\n\n    return fbo;\n};\n\n/**\n * Creates a frame buffer with a texture containing the given data\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param width {Number} the width of the drawing area of the frame buffer\n * @param height {Number} the height of the drawing area of the frame buffer\n * @param data {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} an array of data\n */\nFramebuffer.createFloat32 = function(gl, width, height, data)\n{\n    // create a new texture..\n    var texture = new Texture.fromData(gl, data, width, height);\n    texture.enableNearestScaling();\n    texture.enableWrapClamp();\n\n    //now create the framebuffer object and attach the texture to it.\n    var fbo = new Framebuffer(gl, width, height);\n    fbo.enableTexture(texture);\n\n    fbo.unbind();\n\n    return fbo;\n};\n\nmodule.exports = Framebuffer;\n","\nvar compileProgram = require('./shader/compileProgram'),\n\textractAttributes = require('./shader/extractAttributes'),\n\textractUniforms = require('./shader/extractUniforms'),\n\tsetPrecision = require('./shader/setPrecision'),\n\tgenerateUniformAccessObject = require('./shader/generateUniformAccessObject');\n\n/**\n * Helper class to create a webGL Shader\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext}\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.\n * @param precision {precision]} The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n * @param attributeLocations {object} A key value pair showing which location eact attribute should sit eg {position:0, uvs:1}\n */\nvar Shader = function(gl, vertexSrc, fragmentSrc, precision, attributeLocations)\n{\n\t/**\n\t * The current WebGL rendering context\n\t *\n\t * @member {WebGLRenderingContext}\n\t */\n\tthis.gl = gl;\n\n\tif(precision)\n\t{\n\t\tvertexSrc = setPrecision(vertexSrc, precision);\n\t\tfragmentSrc = setPrecision(fragmentSrc, precision);\n\t}\n\n\t/**\n\t * The shader program\n\t *\n\t * @member {WebGLProgram}\n\t */\n\t// First compile the program..\n\tthis.program = compileProgram(gl, vertexSrc, fragmentSrc, attributeLocations);\n\n\t/**\n\t * The attributes of the shader as an object containing the following properties\n\t * {\n\t * \ttype,\n\t * \tsize,\n\t * \tlocation,\n\t * \tpointer\n\t * }\n\t * @member {Object}\n\t */\n\t// next extract the attributes\n\tthis.attributes = extractAttributes(gl, this.program);\n\n    this.uniformData = extractUniforms(gl, this.program);\n\n\t/**\n\t * The uniforms of the shader as an object containing the following properties\n\t * {\n\t * \tgl,\n\t * \tdata\n\t * }\n\t * @member {Object}\n\t */\n\tthis.uniforms = generateUniformAccessObject( gl, this.uniformData );\n\n};\n/**\n * Uses this shader\n */\nShader.prototype.bind = function()\n{\n\tthis.gl.useProgram(this.program);\n};\n\n/**\n * Destroys this shader\n * TODO\n */\nShader.prototype.destroy = function()\n{\n\tthis.attributes = null;\n\tthis.uniformData = null;\n\tthis.uniforms = null;\n\n\tvar gl = this.gl;\n\tgl.deleteProgram(this.program);\n};\n\n\nmodule.exports = Shader;\n","\n/**\n * Helper class to create a WebGL Texture\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param width {number} the width of the texture\n * @param height {number} the height of the texture\n * @param format {number} the pixel format of the texture. defaults to gl.RGBA\n * @param type {number} the gl type of the texture. defaults to gl.UNSIGNED_BYTE\n */\nvar Texture = function(gl, width, height, format, type)\n{\n\t/**\n\t * The current WebGL rendering context\n\t *\n\t * @member {WebGLRenderingContext}\n\t */\n\tthis.gl = gl;\n\n\n\t/**\n\t * The WebGL texture\n\t *\n\t * @member {WebGLTexture}\n\t */\n\tthis.texture = gl.createTexture();\n\n\t/**\n\t * If mipmapping was used for this texture, enable and disable with enableMipmap()\n\t *\n\t * @member {Boolean}\n\t */\n\t// some settings..\n\tthis.mipmap = false;\n\n\n\t/**\n\t * Set to true to enable pre-multiplied alpha\n\t *\n\t * @member {Boolean}\n\t */\n\tthis.premultiplyAlpha = false;\n\n\t/**\n\t * The width of texture\n\t *\n\t * @member {Number}\n\t */\n\tthis.width = width || -1;\n\t/**\n\t * The height of texture\n\t *\n\t * @member {Number}\n\t */\n\tthis.height = height || -1;\n\n\t/**\n\t * The pixel format of the texture. defaults to gl.RGBA\n\t *\n\t * @member {Number}\n\t */\n\tthis.format = format || gl.RGBA;\n\n\t/**\n\t * The gl type of the texture. defaults to gl.UNSIGNED_BYTE\n\t *\n\t * @member {Number}\n\t */\n\tthis.type = type || gl.UNSIGNED_BYTE;\n\n\n};\n\n/**\n * Uploads this texture to the GPU\n * @param source {HTMLImageElement|ImageData|HTMLVideoElement} the source image of the texture\n */\nTexture.prototype.upload = function(source)\n{\n\tthis.bind();\n\n\tvar gl = this.gl;\n\n\n\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n\tvar newWidth = source.videoWidth || source.width;\n\tvar newHeight = source.videoHeight || source.height;\n\n\tif(newHeight !== this.height || newWidth !== this.width)\n\t{\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format, this.format, this.type, source);\n\t}\n\telse\n\t{\n    \tgl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this.format, this.type, source);\n\t}\n\n\t// if the source is a video, we need to use the videoWidth / videoHeight properties as width / height will be incorrect.\n\tthis.width = newWidth;\n\tthis.height = newHeight;\n\n};\n\nvar FLOATING_POINT_AVAILABLE = false;\n\n/**\n * Use a data source and uploads this texture to the GPU\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.prototype.uploadData = function(data, width, height)\n{\n\tthis.bind();\n\n\tvar gl = this.gl;\n\n\n\tif(data instanceof Float32Array)\n\t{\n\t\tif(!FLOATING_POINT_AVAILABLE)\n\t\t{\n\t\t\tvar ext = gl.getExtension(\"OES_texture_float\");\n\n\t\t\tif(ext)\n\t\t\t{\n\t\t\t\tFLOATING_POINT_AVAILABLE = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new Error('floating point textures not available');\n\t\t\t}\n\t\t}\n\n\t\tthis.type = gl.FLOAT;\n\t}\n\telse\n\t{\n\t\t// TODO support for other types\n\t\tthis.type = this.type || gl.UNSIGNED_BYTE;\n\t}\n\n\t// what type of data?\n\tgl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n\n\n\tif(width !== this.width || height !== this.height)\n\t{\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format,  width, height, 0, this.format, this.type, data || null);\n\t}\n\telse\n\t{\n\t\tgl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, this.format, this.type, data || null);\n\t}\n\n\tthis.width = width;\n\tthis.height = height;\n\n\n//\ttexSubImage2D\n};\n\n/**\n * Binds the texture\n * @param  location\n */\nTexture.prototype.bind = function(location)\n{\n\tvar gl = this.gl;\n\n\tif(location !== undefined)\n\t{\n\t\tgl.activeTexture(gl.TEXTURE0 + location);\n\t}\n\n\tgl.bindTexture(gl.TEXTURE_2D, this.texture);\n};\n\n/**\n * Unbinds the texture\n */\nTexture.prototype.unbind = function()\n{\n\tvar gl = this.gl;\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.minFilter = function( linear )\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tif(this.mipmap)\n\t{\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n\t}\n\telse\n\t{\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n\t}\n};\n\n/**\n * @param linear {Boolean} if we want to use linear filtering or nearest neighbour interpolation\n */\nTexture.prototype.magFilter = function( linear )\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linear ? gl.LINEAR : gl.NEAREST);\n};\n\n/**\n * Enables mipmapping\n */\nTexture.prototype.enableMipmap = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tthis.mipmap = true;\n\n\tgl.generateMipmap(gl.TEXTURE_2D);\n};\n\n/**\n * Enables linear filtering\n */\nTexture.prototype.enableLinearScaling = function()\n{\n\tthis.minFilter(true);\n\tthis.magFilter(true);\n};\n\n/**\n * Enables nearest neighbour interpolation\n */\nTexture.prototype.enableNearestScaling = function()\n{\n\tthis.minFilter(false);\n\tthis.magFilter(false);\n};\n\n/**\n * Enables clamping on the texture so WebGL will not repeat it\n */\nTexture.prototype.enableWrapClamp = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n};\n\n/**\n * Enable tiling on the texture\n */\nTexture.prototype.enableWrapRepeat = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n};\n\nTexture.prototype.enableWrapMirrorRepeat = function()\n{\n\tvar gl = this.gl;\n\n\tthis.bind();\n\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.MIRRORED_REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.MIRRORED_REPEAT);\n};\n\n\n/**\n * Destroys this texture\n */\nTexture.prototype.destroy = function()\n{\n\tvar gl = this.gl;\n\t//TODO\n\tgl.deleteTexture(this.texture);\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param source {HTMLImageElement|ImageData} the source image of the texture\n * @param premultiplyAlpha {Boolean} If we want to use pre-multiplied alpha\n */\nTexture.fromSource = function(gl, source, premultiplyAlpha)\n{\n\tvar texture = new Texture(gl);\n\ttexture.premultiplyAlpha = premultiplyAlpha || false;\n\ttexture.upload(source);\n\n\treturn texture;\n};\n\n/**\n * @static\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param data {TypedArray} the data to upload to the texture\n * @param width {number} the new width of the texture\n * @param height {number} the new height of the texture\n */\nTexture.fromData = function(gl, data, width, height)\n{\n\t//console.log(data, width, height);\n\tvar texture = new Texture(gl);\n\ttexture.uploadData(data, width, height);\n\n\treturn texture;\n};\n\n\nmodule.exports = Texture;\n","\n// state object//\nvar setVertexAttribArrays = require( './setVertexAttribArrays' );\n\n/**\n * Helper class to work with WebGL VertexArrayObjects (vaos)\n * Only works if WebGL extensions are enabled (they usually are)\n *\n * @class\n * @memberof PIXI.glCore\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n */\nfunction VertexArrayObject(gl, state)\n{\n    this.nativeVaoExtension = null;\n\n    if(!VertexArrayObject.FORCE_NATIVE)\n    {\n        this.nativeVaoExtension = gl.getExtension('OES_vertex_array_object') ||\n                                  gl.getExtension('MOZ_OES_vertex_array_object') ||\n                                  gl.getExtension('WEBKIT_OES_vertex_array_object');\n    }\n\n    this.nativeState = state;\n\n    if(this.nativeVaoExtension)\n    {\n        this.nativeVao = this.nativeVaoExtension.createVertexArrayOES();\n\n        var maxAttribs = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n\n        // VAO - overwrite the state..\n        this.nativeState = {\n            tempAttribState: new Array(maxAttribs),\n            attribState: new Array(maxAttribs)\n        };\n    }\n\n    /**\n     * The current WebGL rendering context\n     *\n     * @member {WebGLRenderingContext}\n     */\n    this.gl = gl;\n\n    /**\n     * An array of attributes\n     *\n     * @member {Array}\n     */\n    this.attributes = [];\n\n    /**\n     * @member {PIXI.glCore.GLBuffer}\n     */\n    this.indexBuffer = null;\n\n    /**\n     * A boolean flag\n     *\n     * @member {Boolean}\n     */\n    this.dirty = false;\n}\n\nVertexArrayObject.prototype.constructor = VertexArrayObject;\nmodule.exports = VertexArrayObject;\n\n/**\n* Some devices behave a bit funny when using the newer extensions (im looking at you ipad 2!)\n* If you find on older devices that things have gone a bit weird then set this to true.\n*/\n/**\n * Lets the VAO know if you should use the WebGL extension or the native methods.\n * Some devices behave a bit funny when using the newer extensions (im looking at you ipad 2!)\n * If you find on older devices that things have gone a bit weird then set this to true.\n * @static\n * @property {Boolean} FORCE_NATIVE\n */\nVertexArrayObject.FORCE_NATIVE = false;\n\n/**\n * Binds the buffer\n */\nVertexArrayObject.prototype.bind = function()\n{\n    if(this.nativeVao)\n    {\n        this.nativeVaoExtension.bindVertexArrayOES(this.nativeVao);\n\n        if(this.dirty)\n        {\n            this.dirty = false;\n            this.activate();\n        }\n    }\n    else\n    {\n\n        this.activate();\n    }\n\n    return this;\n};\n\n/**\n * Unbinds the buffer\n */\nVertexArrayObject.prototype.unbind = function()\n{\n    if(this.nativeVao)\n    {\n        this.nativeVaoExtension.bindVertexArrayOES(null);\n    }\n\n    return this;\n};\n\n/**\n * Uses this vao\n */\nVertexArrayObject.prototype.activate = function()\n{\n\n    var gl = this.gl;\n    var lastBuffer = null;\n\n    for (var i = 0; i < this.attributes.length; i++)\n    {\n        var attrib = this.attributes[i];\n\n        if(lastBuffer !== attrib.buffer)\n        {\n            attrib.buffer.bind();\n            lastBuffer = attrib.buffer;\n        }\n\n        gl.vertexAttribPointer(attrib.attribute.location,\n                               attrib.attribute.size,\n                               attrib.type || gl.FLOAT,\n                               attrib.normalized || false,\n                               attrib.stride || 0,\n                               attrib.start || 0);\n    }\n\n    setVertexAttribArrays(gl, this.attributes, this.nativeState);\n\n    if(this.indexBuffer)\n    {\n        this.indexBuffer.bind();\n    }\n\n    return this;\n};\n\n/**\n *\n * @param buffer     {PIXI.gl.GLBuffer}\n * @param attribute  {*}\n * @param type       {String}\n * @param normalized {Boolean}\n * @param stride     {Number}\n * @param start      {Number}\n */\nVertexArrayObject.prototype.addAttribute = function(buffer, attribute, type, normalized, stride, start)\n{\n    this.attributes.push({\n        buffer:     buffer,\n        attribute:  attribute,\n\n        location:   attribute.location,\n        type:       type || this.gl.FLOAT,\n        normalized: normalized || false,\n        stride:     stride || 0,\n        start:      start || 0\n    });\n\n    this.dirty = true;\n\n    return this;\n};\n\n/**\n *\n * @param buffer   {PIXI.gl.GLBuffer}\n */\nVertexArrayObject.prototype.addIndex = function(buffer/*, options*/)\n{\n    this.indexBuffer = buffer;\n\n    this.dirty = true;\n\n    return this;\n};\n\n/**\n * Unbinds this vao and disables it\n */\nVertexArrayObject.prototype.clear = function()\n{\n    // var gl = this.gl;\n\n    // TODO - should this function unbind after clear?\n    // for now, no but lets see what happens in the real world!\n    if(this.nativeVao)\n    {\n        this.nativeVaoExtension.bindVertexArrayOES(this.nativeVao);\n    }\n\n    this.attributes.length = 0;\n    this.indexBuffer = null;\n\n    return this;\n};\n\n/**\n * @param type  {Number}\n * @param size  {Number}\n * @param start {Number}\n */\nVertexArrayObject.prototype.draw = function(type, size, start)\n{\n    var gl = this.gl;\n\n    if(this.indexBuffer)\n    {\n        gl.drawElements(type, size || this.indexBuffer.data.length, gl.UNSIGNED_SHORT, (start || 0) * 2 );\n    }\n    else\n    {\n        // TODO need a better way to calculate size..\n        gl.drawArrays(type, start, size || this.getSize());\n    }\n\n    return this;\n};\n\n/**\n * Destroy this vao\n */\nVertexArrayObject.prototype.destroy = function()\n{\n    // lose references\n    this.gl = null;\n    this.indexBuffer = null;\n    this.attributes = null;\n    this.nativeState = null;\n\n    if(this.nativeVao)\n    {\n        this.nativeVaoExtension.deleteVertexArrayOES(this.nativeVao);\n    }\n\n    this.nativeVaoExtension = null;\n    this.nativeVao = null;\n};\n\nVertexArrayObject.prototype.getSize = function()\n{\n    var attrib = this.attributes[0];\n    return attrib.buffer.data.length / (( attrib.stride/4 ) || attrib.attribute.size);\n};\n","\n/**\n * Helper class to create a webGL Context\n *\n * @class\n * @memberof PIXI.glCore\n * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from\n * @param options {Object} An options object that gets passed in to the canvas element containing the context attributes,\n *                         see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext for the options available\n * @return {WebGLRenderingContext} the WebGL context\n */\nvar createContext = function(canvas, options)\n{\n    var gl = canvas.getContext('webgl', options) || \n         canvas.getContext('experimental-webgl', options);\n\n    if (!gl)\n    {\n        // fail, not able to get a context\n        throw new Error('This browser does not support webGL. Try using the canvas renderer');\n    }\n\n    return gl;\n};\n\nmodule.exports = createContext;\n","// var GL_MAP = {};\n\n/**\n * @param gl {WebGLRenderingContext} The current WebGL context\n * @param attribs {*}\n * @param state {*}\n */\nvar setVertexAttribArrays = function (gl, attribs, state)\n{\n    var i;\n    if(state)\n    {\n        var tempAttribState = state.tempAttribState,\n            attribState = state.attribState;\n\n        for (i = 0; i < tempAttribState.length; i++)\n        {\n            tempAttribState[i] = false;\n        }\n\n        // set the new attribs\n        for (i = 0; i < attribs.length; i++)\n        {\n            tempAttribState[attribs[i].attribute.location] = true;\n        }\n\n        for (i = 0; i < attribState.length; i++)\n        {\n            if (attribState[i] !== tempAttribState[i])\n            {\n                attribState[i] = tempAttribState[i];\n\n                if (state.attribState[i])\n                {\n                    gl.enableVertexAttribArray(i);\n                }\n                else\n                {\n                    gl.disableVertexAttribArray(i);\n                }\n            }\n        }\n\n    }\n    else\n    {\n        for (i = 0; i < attribs.length; i++)\n        {\n            var attrib = attribs[i];\n            gl.enableVertexAttribArray(attrib.attribute.location);\n        }\n    }\n};\n\nmodule.exports = setVertexAttribArrays;\n","\n/**\n * @class\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.\n * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations\n * @return {WebGLProgram} the shader program\n */\nvar compileProgram = function(gl, vertexSrc, fragmentSrc, attributeLocations)\n{\n    var glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);\n    var glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);\n\n    var program = gl.createProgram();\n\n    gl.attachShader(program, glVertShader);\n    gl.attachShader(program, glFragShader);\n\n    // optionally, set the attributes manually for the program rather than letting WebGL decide..\n    if(attributeLocations)\n    {\n        for(var i in attributeLocations)\n        {\n            gl.bindAttribLocation(program, attributeLocations[i], i);\n        }\n    }\n\n\n    gl.linkProgram(program);\n\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        console.error('Pixi.js Error: Could not initialize shader.');\n        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n        console.error('gl.getError()', gl.getError());\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n\n        gl.deleteProgram(program);\n        program = null;\n    }\n\n    // clean up some shaders\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    return program;\n};\n\n/**\n * @private\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @return {WebGLShader} the shader\n */\nvar compileShader = function (gl, type, src)\n{\n    var shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    {\n        console.log(gl.getShaderInfoLog(shader));\n        return null;\n    }\n\n    return shader;\n};\n\nmodule.exports = compileProgram;\n","/**\n * @class\n * @memberof PIXI.glCore.shader\n * @param type {String} Type of value\n * @param size {Number}\n */\nvar defaultValue = function(type, size) \n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2': \n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':     \n            return new Float32Array(4 * size);\n            \n        case 'int':\n        case 'sampler2D':\n            return 0;\n\n        case 'ivec2':   \n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4': \n            return new Int32Array(4 * size);\n\n        case 'bool':     \n            return false;\n\n        case 'bvec2':\n\n            return booleanArray( 2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                                     0, 1]);\n\n        case 'mat3': \n            return new Float32Array([1, 0, 0,\n                                     0, 1, 0,\n                                     0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                                     0, 1, 0, 0,\n                                     0, 0, 1, 0,\n                                     0, 0, 0, 1]);\n    }\n};\n\nvar booleanArray = function(size)\n{\n    var array = new Array(size);\n\n    for (var i = 0; i < array.length; i++) \n    {\n        array[i] = false;\n    }\n\n    return array;\n};\n\nmodule.exports = defaultValue;\n","\nvar mapType = require('./mapType');\nvar mapSize = require('./mapSize');\n\n/**\n * Extracts the attributes\n * @class\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param program {WebGLProgram} The shader program to get the attributes from\n * @return attributes {Object}\n */\nvar extractAttributes = function(gl, program)\n{\n    var attributes = {};\n\n    var totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (var i = 0; i < totalAttributes; i++)\n    {\n        var attribData = gl.getActiveAttrib(program, i);\n        var type = mapType(gl, attribData.type);\n\n        attributes[attribData.name] = {\n            type:type,\n            size:mapSize(type),\n            location:gl.getAttribLocation(program, attribData.name),\n            //TODO - make an attribute object\n            pointer: pointer\n        };\n    }\n\n    return attributes;\n};\n\nvar pointer = function(type, normalized, stride, start){\n    // console.log(this.location)\n    gl.vertexAttribPointer(this.location,this.size, type || gl.FLOAT, normalized || false, stride || 0, start || 0);\n};\n\nmodule.exports = extractAttributes;\n","var mapType = require('./mapType');\nvar defaultValue = require('./defaultValue');\n\n/**\n * Extracts the uniforms\n * @class\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param program {WebGLProgram} The shader program to get the uniforms from\n * @return uniforms {Object}\n */\nvar extractUniforms = function(gl, program)\n{\n\tvar uniforms = {};\n\n    var totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (var i = 0; i < totalUniforms; i++)\n    {\n    \tvar uniformData = gl.getActiveUniform(program, i);\n    \tvar name = uniformData.name.replace(/\\[.*?\\]/, \"\");\n        var type = mapType(gl, uniformData.type );\n\n    \tuniforms[name] = {\n    \t\ttype:type,\n    \t\tsize:uniformData.size,\n    \t\tlocation:gl.getUniformLocation(program, name),\n    \t\tvalue:defaultValue(type, uniformData.size)\n    \t};\n    }\n\n\treturn uniforms;\n};\n\nmodule.exports = extractUniforms;\n","/**\n * Extracts the attributes\n * @class\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL rendering context\n * @param uniforms {Array} @mat ?\n * @return attributes {Object}\n */\nvar generateUniformAccessObject = function(gl, uniformData)\n{\n    // this is the object we will be sending back.\n    // an object hierachy will be created for structs\n    var uniforms = {data:{}};\n\n    uniforms.gl = gl;\n\n    var uniformKeys= Object.keys(uniformData);\n\n    for (var i = 0; i < uniformKeys.length; i++)\n    {\n        var fullName = uniformKeys[i];\n\n        var nameTokens = fullName.split('.');\n        var name = nameTokens[nameTokens.length - 1];\n\n\n        var uniformGroup = getUniformGroup(nameTokens, uniforms);\n\n        var uniform =  uniformData[fullName];\n        uniformGroup.data[name] = uniform;\n\n        uniformGroup.gl = gl;\n\n        Object.defineProperty(uniformGroup, name, {\n            get: generateGetter(name),\n            set: generateSetter(name, uniform)\n        });\n    }\n\n    return uniforms;\n};\n\nvar generateGetter = function(name)\n{\n\tvar template = getterTemplate.replace('%%', name);\n\treturn new Function(template); // jshint ignore:line\n};\n\nvar generateSetter = function(name, uniform)\n{\n    var template = setterTemplate.replace(/%%/g, name);\n    var setTemplate;\n\n    if(uniform.size === 1)\n    {\n        setTemplate = GLSL_TO_SINGLE_SETTERS[uniform.type];\n    }\n    else\n    {\n        setTemplate = GLSL_TO_ARRAY_SETTERS[uniform.type];\n    }\n\n    if(setTemplate)\n    {\n        template += \"\\nthis.gl.\" + setTemplate + \";\";\n    }\n\n  \treturn new Function('value', template); // jshint ignore:line\n};\n\nvar getUniformGroup = function(nameTokens, uniform)\n{\n    var cur = uniform;\n\n    for (var i = 0; i < nameTokens.length - 1; i++)\n    {\n        var o = cur[nameTokens[i]] || {data:{}};\n        cur[nameTokens[i]] = o;\n        cur = o;\n    }\n\n    return cur;\n};\n\nvar getterTemplate = [\n    'return this.data.%%.value;',\n].join('\\n');\n\nvar setterTemplate = [\n    'this.data.%%.value = value;',\n    'var location = this.data.%%.location;'\n].join('\\n');\n\n\nvar GLSL_TO_SINGLE_SETTERS = {\n\n    'float':    'uniform1f(location, value)',\n\n    'vec2':     'uniform2f(location, value[0], value[1])',\n    'vec3':     'uniform3f(location, value[0], value[1], value[2])',\n    'vec4':     'uniform4f(location, value[0], value[1], value[2], value[3])',\n\n    'int':      'uniform1i(location, value)',\n    'ivec2':    'uniform2i(location, value[0], value[1])',\n    'ivec3':    'uniform3i(location, value[0], value[1], value[2])',\n    'ivec4':    'uniform4i(location, value[0], value[1], value[2], value[3])',\n\n    'bool':     'uniform1i(location, value)',\n    'bvec2':    'uniform2i(location, value[0], value[1])',\n    'bvec3':    'uniform3i(location, value[0], value[1], value[2])',\n    'bvec4':    'uniform4i(location, value[0], value[1], value[2], value[3])',\n\n    'mat2':     'uniformMatrix2fv(location, false, value)',\n    'mat3':     'uniformMatrix3fv(location, false, value)',\n    'mat4':     'uniformMatrix4fv(location, false, value)',\n\n    'sampler2D':'uniform1i(location, value)'\n};\n\nvar GLSL_TO_ARRAY_SETTERS = {\n\n    'float':    'uniform1fv(location, value)',\n\n    'vec2':     'uniform2fv(location, value)',\n    'vec3':     'uniform3fv(location, value)',\n    'vec4':     'uniform4fv(location, value)',\n\n    'int':      'uniform1iv(location, value)',\n    'ivec2':    'uniform2iv(location, value)',\n    'ivec3':    'uniform3iv(location, value)',\n    'ivec4':    'uniform4iv(location, value)',\n\n    'bool':     'uniform1iv(location, value)',\n    'bvec2':    'uniform2iv(location, value)',\n    'bvec3':    'uniform3iv(location, value)',\n    'bvec4':    'uniform4iv(location, value)',\n\n    'sampler2D':'uniform1iv(location, value)'\n};\n\nmodule.exports = generateUniformAccessObject;\n","module.exports = {\n    compileProgram: require('./compileProgram'),\n    defaultValue: require('./defaultValue'),\n    extractAttributes: require('./extractAttributes'),\n    extractUniforms: require('./extractUniforms'),\n    generateUniformAccessObject: require('./generateUniformAccessObject'),\n    setPrecision: require('./setPrecision'),\n    mapSize: require('./mapSize'),\n    mapType: require('./mapType')\n};","/**\n * @class\n * @memberof PIXI.glCore.shader\n * @param type {String}\n * @return {Number}\n */\nvar mapSize = function(type) \n{ \n    return GLSL_TO_SIZE[type];\n};\n\n\nvar GLSL_TO_SIZE = {\n    'float':    1,\n    'vec2':     2,\n    'vec3':     3,\n    'vec4':     4,\n\n    'int':      1,\n    'ivec2':    2,\n    'ivec3':    3,\n    'ivec4':    4,\n\n    'bool':     1,\n    'bvec2':    2,\n    'bvec3':    3,\n    'bvec4':    4,\n\n    'mat2':     4,\n    'mat3':     9,\n    'mat4':     16,\n\n    'sampler2D':  1\n};\n\nmodule.exports = mapSize;\n","\n\nvar mapSize = function(gl, type) \n{\n    if(!GL_TABLE) \n    {\n        var typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for(var i = 0; i < typeNames.length; ++i) \n        {\n            var tn = typeNames[i];\n            GL_TABLE[ gl[tn] ] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n  return GL_TABLE[type];\n};\n\nvar GL_TABLE = null;\n\nvar GL_TO_GLSL_TYPES = {\n  'FLOAT':       'float',\n  'FLOAT_VEC2':  'vec2',\n  'FLOAT_VEC3':  'vec3',\n  'FLOAT_VEC4':  'vec4',\n\n  'INT':         'int',\n  'INT_VEC2':    'ivec2',\n  'INT_VEC3':    'ivec3',\n  'INT_VEC4':    'ivec4',\n  \n  'BOOL':        'bool',\n  'BOOL_VEC2':   'bvec2',\n  'BOOL_VEC3':   'bvec3',\n  'BOOL_VEC4':   'bvec4',\n  \n  'FLOAT_MAT2':  'mat2',\n  'FLOAT_MAT3':  'mat3',\n  'FLOAT_MAT4':  'mat4',\n  \n  'SAMPLER_2D':  'sampler2D'  \n};\n\nmodule.exports = mapSize;\n","/**\n * Sets the float precision on the shader. If the precision is already present this function will do nothing\n * @param {string} src       the shader source\n * @param {string} precision The float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n *\n * @return {string} modified shader source\n */\nvar setPrecision = function(src, precision)\n{\n    if(src.substring(0, 9) !== 'precision')\n    {\n        return 'precision ' + precision + ' float;\\n' + src;\n    }\n\n    return src;\n};\n\nmodule.exports = setPrecision;\n","var gl = {\n    createContext:          require('./createContext'),\n    setVertexAttribArrays:  require('./setVertexAttribArrays'),\n    GLBuffer:               require('./GLBuffer'),\n    GLFramebuffer:          require('./GLFramebuffer'),\n    GLShader:               require('./GLShader'),\n    GLTexture:              require('./GLTexture'),\n    VertexArrayObject:      require('./VertexArrayObject'),\n    shader:                 require('./shader')\n};\n\n// Export for Node-compatible environments\nif (typeof module !== 'undefined' && module.exports)\n{\n    // Export the module\n    module.exports = gl;\n}\n\n// Add to the browser window pixi.gl\nif (typeof window !== 'undefined')\n{\n    // add the window object\n    window.PIXI = window.PIXI || {};\n    window.PIXI.glCore = gl;\n}\n"],"sourceRoot":"/source/"}